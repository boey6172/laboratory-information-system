import React, { useContext, useState, useEffect } from "react";
import { makeStyles } from "@material-ui/core/styles";
import { useForm } from "react-hook-form";
import {
  Modal,
  Button,
  Box,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  FormHelperText,
  MenuItem,
  Input,
  Chip,
} from "@material-ui/core";
import Backdrop from "@material-ui/core/Backdrop";
import Fade from "@material-ui/core/Fade";
import Edit from "@material-ui/icons/Edit";
import ReportProblemIcon from "@material-ui/icons/ReportProblem";
import { UPDATE_EMPLOYEE, GET_SKILLS, DOCUMENT_ATTACHMENTS , GET_QUERY, UPDATE_EMPLOYEE_INFO} from "../Query";
import { GET_EMPLOYEE } from "../../Query"
import { useQuery, useMutation } from "@apollo/client";
import { LaptopWindows } from "@material-ui/icons";
import { Controller } from "react-hook-form";
import IconButton from "@material-ui/core/IconButton";
import { remove } from "nprogress";
import Autocomplete from "@material-ui/lab/Autocomplete";

const useStyles = makeStyles((theme) => ({
  modal: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  },
  chips: {
    display: "flex",
    flexWrap: "wrap",
  },
  paperHead: {
    background: "#e0e0e0",
    color: "#212121",
    height: "40px",
    textAlign: "center",
    fontFamily: "Roboto",
    padding: 10,
  },
  paperBody: {
    padding: 20,
  },
  paper: {
    marginTop: "-200px",
    backgroundColor: theme.palette.background.paper,
    width: "500px",
  },
  update: {
    backgroundColor: "#1976d2",
    color: "white",
    marginLeft: "5px",
  },
  buttons: {
    marginTop: "25px",
  },
  dangerText: {
    color: "#757575",
    textAlign: "center",
    fontFamily: "Roboto",
    fontSize: 13,
  },
  dangerIcon: {
    color: "red",
    fontSize: "50px",
  },
  editIcon: {
    marginTop: "5px",
    color: "#3e2723",
    fontSize: "13px",
    "&:hover": {
      color: "#9e9e9e",
      cursor: "pointer",
    },
  },
  uplaodIcon: {
    color: "#000",
    "&:hover": {
      color: "#3f51b5",
      cursor: "pointer",
    },
  },
  input: {
    display: "none",
  },
}));

const states = {
  employee_id: "",
  shift: "",
};

let attachments = {
  document_attachments: [],
};

export default ({ }) => {
    /* Initialization & Instance   */
  const { useFormInstance, state, isDisabled } = useContext(
    FormContext
  );

  const classes = useStyles();
  const [open, setOpen] = useState(false);

  const useFormInstance = useForm({
    shouldFocusError: false,
  });

  const { handleSubmit, errors, getValues, control } = useFormInstance;

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };


  const [
    updateEmployeeInfo,
    { loading: loadingUpdateEmployeeInfo, error: errorUpdateEmployeeInfo },
  ] = useMutation(UPDATE_EMPLOYEE_INFO, {
    onCompleted(data) {
      window.location = window.location;
    },
    errorPolicy: "all",
  });

  const onUpdate = async (info) => {

    const {
      employee_info: {
        shift,
      },
    } = { ...info };

    states.shift = shift
    states.employee_id = data._id;

    updateEmployeeInfo({ 
      variables: { 
        id: data.employee_info._id,
        input: states 
      },
      refetchQueries: { query: GET_EMPLOYEE }
    });

  };

  const body = (
    <>
      <div className={classes.paper}>
        <div className={classes.paperHead}>
          <p>Change User Role</p>
        </div>
        <div className={classes.paperBody}>
        <Grid item md={4} xs={12}>
            <Controller
                control={control}
                name="credential.roles"
                defaultValue={null} // insert default value
                rules={{ required: true }}
                render={({
                  field: { onChange, onBlur, value, name, ref },
                  fieldState: { invalid, isTouched, isDirty, error },
                  formState,
                }) => (
                    <>
                        <FormControl
                        variant="outlined"
                        error={checkRole(error).hasError}
                        fullWidth
                        disabled={isDisabled}
                        >
                        <InputLabel id="demo-simple-select-outlined-label">
                            Role
                        </InputLabel>
                        <Select
                            onChange={onChange}
                            onBlur={onBlur}
                            label="Role"
                            labelId="demo-simple-select-outlined-label"
                            id="demo-simple-select-outlined"
                        >
                            {roles?.map(({ name: _name }, index) => (
                            <MenuItem value={_name} key={index}> 
                                {_name.charAt(0).toUpperCase() + _name.slice(1)}
                            </MenuItem>
                            ))}
                        </Select>
                        {error && <FormHelperText>{checkRole(error).message}</FormHelperText>}
                        </FormControl>
                    </>
                )}
            />
            </Grid>

            <Box display="flex" justifyContent="center" mt={3}>
                <Button
                    onClick={handleClose}
                    variant="contained"
                    size="small"
                    className={classes.margin}
                >
                Cancel
                </Button>
                <Button
                    variant="contained"
                    size="small"
                    onClick={handleSubmit(onUpdate)}
                    className={classes.update}
                >
                Update
                </Button>
            </Box>
        </div>
      </div>
    </>
  );

  return (
    <>
      <div>
        <Button onClick={handleOpen} className={classes.editIcon}>
          Change Role
        </Button>
        <Modal
          aria-labelledby="transition-modal-title"
          aria-describedby="transition-modal-description"
          className={classes.modal}
          open={open}
          onClose={handleClose}
          closeAfterTransition
          BackdropComponent={Backdrop}
          BackdropProps={{
            timeout: 500,
          }}
        >
          <Fade in={open}>{body}</Fade>
        </Modal>
      </div>
    </>
  );
};
